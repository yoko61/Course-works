-- Write a SELECT statement to return the month column, as well as an additional column for the quarter (1, 2, 3, or 4) that is based on the month.  	Please use a CASE expression for this and do not alter the table.
select month , 
Case 
	WHEN month<4 THEN 1
	WHEN month>3 and month <=6 THEN 2
	WHEN month>6 and month <=9 THEN 3 
	ELSE 4
end 
quarter
from Sales_Totals
order by month ASC

-- Write a query that will pivot the Sales_Totals data so that there is a column for each of the 4 products containing the total sales across all months of 2020.  
-- It is OK to include the product_id values in your query, and the results should look as follows:
-- tot_sales_large_gears	tot_sales_small_gears	tot_sales_crankshafts	tot_sales_sprockets
-- 6200	5450	0	3050
SELECT 
SUM(CASE
    WHEN product_id='1256' THEN sales
end)tot_sales_large_gears,
SUM(CASE
    WHEN product_id='4437' THEN sales
end)tot_sales_small_gears,
SUM(CASE
    WHEN product_id='5567' THEN sales
    else 0
end)tot_sales_crankshafts,
SUM(CASE
    WHEN product_id='7684' THEN sales
end)tot_sales_sprockets
from Sales_Totals
  
-- Write a query that retrieves all columns from the Sales_Totals table, along with a column called sales_rank which assigns a ranking to each row based on the value of the Sales column in descending order. 
-- Please use SQL RANK functions shown in the class video.
SELECT *, 
       RANK() OVER(ORDER BY sales DESC) sales_rank
FROM sales_totals

-- Write a query that retrieves all columns from the Sales_Totals table, along with a column called product_sales_rank which assigns a ranking to each row 
-- based on the value of the Sales column in descending order, with a separate set of rankings for each product. Please use SQL RANK functions shown in the class video.
SELECT *, 
       RANK() OVER(PARTITION BY product_id ORDER BY sales DESC) product_sales_rank
FROM sales_totals

-- Expand on the query from question #4 by adding logic to return only those rows with a product_sales_rank of 1 or 2.

SELECT *
from
(
	SELECT *, 
		   RANK() OVER(PARTITION BY product_id ORDER BY sales DESC) product_sales_rank
	FROM sales_totals
)x
where product_sales_rank<=2


-- Write a set of SQL statements which will add a row to the Region table for Europe, and then add a row to the Sales_Total table for the Europe region and the 
-- Sprocket product (product_id = 7684) for October 2020, with a sales total of $1,500. You can assign any value to the region_id column, as long as it is unique to the Region table. 
-- The statements should be executed as a single unit of work. Please note that since the statements are executed as a single unit of work, additional code is needed.

START TRANSACTION;
insert into region (region_id, region_name)  
select 201, 'Europe';
insert into sales_totals(product_id, region_id, year, month,sales)
values
(7684, 201, 2020, 10, 1500);
commit; 

-- Write a statement to create a view called Product_Sales_Totals which will group sales data by product and year.  Columns should include product_id, year, product_sales, and gear_sales. 
-- The gear_sales column will contain the total sales for the “Gear - Large” or the total sales for “Gear Small” products, depending on the product_id. 
-- In the case that the product is neither “Gear - Large” or “Gear Small”, the value for gear_sales should be 0. 
-- (The data should be generated by an expression, and it is OK to use the product_id values in the expression).  
-- To accomplish this, you need a CASE statement. The product_sales column should be a sum of sales for the particular product_id and year, regardless of what kind of product it is (including gears).

CREATE VIEW `Product_Sales_Totals` AS
select 
  product_id, 
  year, 
  sum(sales) product_sales,
  sum(case when product_id=1256 or product_id='4437' then sales else 0 end) gear_sales
from sales_totals
group by product_id, year

-- Write a query to return all sales data for 2020, along with a column called “pct_product_sales” showing the percentage of sales for each product by region_id and month.  
-- Columns should include product_id, region_id, month, sales, and pct_product_sales. The values in pct_product_sales should add up to 100% for each product.

select  product_id, region_id, month, sales, round(100*(sales/product_sales), 2)pct_product_sales
from(
	select product_id, region_id, month, sales, 
	sum(sales)over (partition by product_id) product_sales
	from sales_totals
    where year=2020
)sales
order by 1

-- Write a query to return the year, month, and sales columns, along with a 4th column named prior_month_sales showing the sales from the prior month.  
-- There are only 12 rows in the sales_totals table, one for each month of 2020, so you will not need to group data or filter/partition on region_id or product_id. 
-- Please use a windowing function for this as shown in the class video.

SELECT 
year, month, sales, 
coalesce(lag(sales,1) over (order by month),0) prior_month_sales 
FROM sales_totals
group by year, month
order by 1,2;

-- If the tables used in this prompt are in the ‘sales’ database, write a query to retrieve the name and type of each of the columns in the Product table. 
-- Please specify the 'sales' schema in your answer. (You can test with the actual name of your schema and then replace the name with 'sales').

select column_name, column_type 
from information_schema.columns
where table_name='product' and table_schema='sales'